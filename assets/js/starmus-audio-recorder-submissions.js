// ==== starmus-audio-form-submission.js ====
// Build Hash: 66b1d653d14e7c7f31fe6b00158f7cdf6eb3cd6e9b6e8ca97e6271430253fc00
// SHA-1: e4fdb834a69511fc7c3a0ef6acd7ccfba32aa04f
// SHA-256: 66b1d653d14e7c7f31fe6b00158f7cdf6eb3cd6e9b6e8ca97e6271430253fc00

document.addEventListener('DOMContentLoaded', () => {
    const logPrefix = 'STARMUS_FORM:';
    console.log(logPrefix, 'DOM fully loaded. Initializing audio form submissions.');

    // Find all recorder wrappers on the page. Each one contains a form.
    // The wrapper should have the data-enabled-recorder attribute and the unique ID.
    const recorderWrappers = document.querySelectorAll('[data-enabled-recorder]');

    if (recorderWrappers.length === 0) {
        console.log(logPrefix, 'No audio recorder forms found on this page.');
        return;
    }

    recorderWrappers.forEach(wrapper => {
        // Extract the unique instance suffix from the wrapper's ID
        // Assumes wrapper ID is like 'starmus_audioWrapper_XYZ'
        const wrapperId = wrapper.id; // e.g., starmus_audioWrapper_sparxstarAudioForm_instance1
        if (!wrapperId || !wrapperId.startsWith('starmus_audioWrapper_')) {
            console.warn(logPrefix, 'Recorder wrapper found without a valid prefixed ID. Skipping:', wrapper);
            return;
        }
        // The formInstanceId is the ID of the <form> element itself, which was generated by PHP's $form_id
        // This is what we used as the suffix for all internal elements.
        const formInstanceId = wrapperId.substring('starmus_audioWrapper_'.length);
        console.log(logPrefix, `Initializing for form instance: ${formInstanceId}`);

        const formElement = document.getElementById(formInstanceId);
        const statusDiv = document.getElementById(`sparxstar_status_${formInstanceId}`);
        const statusTextSpan = statusDiv ? statusDiv.querySelector('.sparxstar_status__text') : null;
        const loaderDiv = document.getElementById(`sparxstar_loader_${formInstanceId}`);
        const loaderTextSpan = loaderDiv ? loaderDiv.querySelector('.sparxstar_status__text') : null;
        const uuidField = document.getElementById(`audio_uuid_${formInstanceId}`); // The hidden UUID field

        if (!formElement) {
            console.error(logPrefix, `Form element not found for instance ID: ${formInstanceId}. Skipping.`);
            return;
        }
        if (!statusDiv || !statusTextSpan) {
            console.warn(logPrefix, `Status display not fully found for instance ID: ${formInstanceId}.`);
        }
        if (!loaderDiv || !loaderTextSpan) {
            console.warn(logPrefix, `Loader display not fully found for instance ID: ${formInstanceId}.`);
        }
        if (!uuidField) {
            console.error(logPrefix, `UUID field not found for instance ID: ${formInstanceId}. Submission will likely fail.`);
            // Potentially disable submit button here if UUID field is critical and missing
        }

        // --- Initialize the StarmusAudioRecorder for this specific form instance ---
        // This assumes StarmusAudioRecorder is a singleton that gets reconfigured.
        // If it were a factory/class, you'd do: const recorder = new StarmusAudioRecorder();
        // For a singleton, we pass the unique IDs for this instance.
        if (typeof StarmusAudioRecorder !== 'undefined' && StarmusAudioRecorder.init) {
            console.log(logPrefix, `Initializing StarmusAudioRecorder module for instance: ${formInstanceId}`);
            StarmusAudioRecorder.init({
                formInstanceId: formInstanceId, // This is the key for the recorder to find its elements
                buildHash: '66b1d653d14e7c7f31fe6b00158f7cdf6eb3cd6e9b6e8ca97e6271430253fc00', // Pass the actual hash
                recorderContainerSelector: `#starmus_audioWrapper_${formInstanceId}` // Make container specific
                // Other base IDs (recordButton, pauseButton etc.) are default in the module
            }).then(success => {
                if (success) {
                    console.log(logPrefix, `Recorder module initialized successfully for ${formInstanceId}.`);
                } else {
                    console.error(logPrefix, `Recorder module FAILED to initialize for ${formInstanceId}.`);
                    if (statusTextSpan) statusTextSpan.textContent = 'Recorder failed to load.';
                    if (statusDiv) statusDiv.classList.remove('sparxstar_visually_hidden');
                }
            }).catch(error => {
                console.error(logPrefix, `Error during recorder module initialization for ${formInstanceId}:`, error);
                if (statusTextSpan) statusTextSpan.textContent = 'Error loading recorder.';
                if (statusDiv) statusDiv.classList.remove('sparxstar_visually_hidden');
            });
        } else {
            console.error(logPrefix, 'StarmusAudioRecorder module is not available.');
            if (statusTextSpan) statusTextSpan.textContent = 'Critical error: Recorder unavailable.';
            if (statusDiv) statusDiv.classList.remove('sparxstar_visually_hidden');
        }

        // --- Listen for the custom event from the recorder module when audio is ready ---
        wrapper.addEventListener('starmusAudioReady', (event) => {
            console.log(logPrefix, `starmusAudioReady event received for ${formInstanceId}!`, event.detail);
            if (event.detail && event.detail.uuid) {
                // The UUID is in event.detail.uuid and also populated in the uuidField by the recorder
                document.cookie = `audio_uuid=${uuidField.value}; path=/; SameSite=Lax; Secure`;
                console.log(logPrefix, `Cookie set for ${formInstanceId} with UUID:`, event.detail.uuid);
                if (statusTextSpan) statusTextSpan.textContent = 'Recording ready to submit.'; // Update status
                if (statusDiv) statusDiv.classList.remove('sparxstar_visually_hidden');
            } else {
                console.warn(logPrefix, `starmusAudioReady event for ${formInstanceId} missing UUID in detail.`);
            }
        });

        // --- Handle Form Submission via AJAX ---
        formElement.addEventListener('submit', async (e) => {
            e.preventDefault();
            console.log(logPrefix, `Submit event for form: ${formInstanceId}`);

            if (!uuidField || !uuidField.value) {
                console.error(logPrefix, `UUID not set for ${formInstanceId}. Cannot submit.`);
                if (statusTextSpan) statusTextSpan.textContent = 'Error: Audio not recorded or UUID missing.';
                if (statusDiv) statusDiv.classList.remove('sparxstar_visually_hidden');
                return;
            }

            // Ensure cookie is set with the latest UUID from the field (in case event was missed or timing)
            // Though the event listener is the primary way. This is a fallback.
            if (uuidField.value) {
                 document.cookie = `audio_uuid=${uuidField.value}; path=/; SameSite=Lax; Secure`;
            }

            // Show loader, hide status
            if (loaderDiv) loaderDiv.classList.remove('sparxstar_visually_hidden');
            if (loaderTextSpan) loaderTextSpan.textContent = 'Submittingâ€¦ please wait.'; // Default text
            if (statusDiv) statusDiv.classList.add('sparxstar_visually_hidden');


            const formData = new FormData(formElement);
            // The nonce is already in the form from PHP, FormData will pick it up.
            // The 'action' hidden field is also in the form.

            // Access localized data (ensure starmusFormData is available)
            const ajaxUrl = typeof starmusFormData !== 'undefined' ? starmusFormData.ajax_url : '/wp-admin/admin-ajax.php';

            try {
                const response = await fetch(ajaxUrl, { // Use localized ajax_url
                    method: 'POST',
                    body: formData
                    // 'Content-Type': 'multipart/form-data' is usually set automatically by fetch with FormData
                });

                // Hide loader first
                if (loaderDiv) loaderDiv.classList.add('sparxstar_visually_hidden');

                const responseData = await response.json(); // Assuming server always sends JSON

                if (response.ok && responseData.success) {
                    console.log(logPrefix, `Submission successful for ${formInstanceId}:`, responseData);
                    if (statusTextSpan) {
                        statusTextSpan.textContent = responseData.message || 'Successfully submitted!';
                        statusTextSpan.className = 'sparxstar_status__text success';
                    }
                    if (statusDiv) statusDiv.classList.remove('sparxstar_visually_hidden');
                    formElement.reset(); // Resets standard form fields

                    // Call cleanup on the recorder module instance
                    if (typeof StarmusAudioRecorder !== 'undefined' && StarmusAudioRecorder.cleanup) {
                        StarmusAudioRecorder.cleanup(); // Resets the singleton recorder's UI and state
                    }
                    // Optionally, close the modal here after a short delay
                    if (typeof window.onStarmusSubmitSuccess === 'function') {
                        window.onStarmusSubmitSuccess(formInstanceId, responseData);
                    }
                } else {
                    console.error(logPrefix, `Submission error for ${formInstanceId}:`, responseData);
                    const errorMessage = responseData.data && responseData.data.message ? responseData.data.message : (responseData.message || 'Unknown server error.');
                    if (statusTextSpan) {
                        statusTextSpan.textContent = `Error: ${errorMessage}`;
                        statusTextSpan.className = 'sparxstar_status__text error';
                    }
                    if (statusDiv) statusDiv.classList.remove('sparxstar_visually_hidden');
                }
            } catch (error) {
                console.error(logPrefix, `Network or parsing error during submission for ${formInstanceId}:`, error);
                if (loaderDiv) loaderDiv.classList.add('sparxstar_visually_hidden');
                if (statusTextSpan) {
                    statusTextSpan.textContent = 'Network error or invalid server response. Please try again.';
                    statusTextSpan.className = 'sparxstar_status__text error';
                }
                if (statusDiv) statusDiv.classList.remove('sparxstar_visually_hidden');
            }
        });

        console.log(logPrefix, `Event listeners and setup complete for form instance: ${formInstanceId}`);
    }); // End forEach recorderWrapper
});
